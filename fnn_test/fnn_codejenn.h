#pragma once
#include <iostream>
#include <array>
#include <random>
#include <cmath>
#include <functional>
#include <stdexcept>

template<typename Scalar>
using activationFunction = void(*)(Scalar&, Scalar, Scalar);


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


template<typename Scalar, int output_size>
void Dense(Scalar* outputs, const Scalar* inputs, const Scalar* weights, const Scalar* biases, int input_size, activationFunction<Scalar> activation_function, Scalar alpha) noexcept {
    // for(int i = 0; i < output_size; ++i){
    //     Scalar sum = 0;
    //     for(int j = 0; j < input_size; ++j){
    //         sum += inputs[j] * weights[j * output_size + i];
    //     }
    //     sum += biases[i];
    //     activation_function(outputs[i], sum, alpha);
    // }
    for (int kk = 0; kk < output_size; ++kk) {
        Scalar sum = 0;
        for (int jj = 0; jj < input_size; ++jj) {
            // Replicates: x2[kk] += A[...] * x1[jj]
            sum += weights[kk + (jj - 1) * output_size] * inputs[jj];
        }
        sum += biases[kk];
        activation_function(outputs[kk], sum, alpha);
    }
}

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//

template <typename Scalar = double>
auto myfnn(const std::array<Scalar, 11>& initial_input) {

    constexpr int flat_size = 11; 
    std::array<Scalar, flat_size> model_input;
    for (int i=0; i<flat_size; i++) { model_input[i] = initial_input[i]; }
    if (model_input.size() != 11) { throw std::invalid_argument("Invalid input size. Expected size: 11"); }

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//

    constexpr std::array<Scalar, 110> weights_1 = { 
        0.182565078139305, 0.170207992196083, -0.224961549043655, 0.706952571868896, -0.996278285980225, 0.651080787181854, 0.428181886672974, 0.136182919144630, 0.010284833610058, 0.286067128181458, 0.145497351884842, 0.054719820618629, -0.101572789251804, 0.098652563989162, 1.335234165191650, 0.536781132221222, 0.039063196629286, -0.080791443586349, -0.608290493488312, -0.736974835395813, 0.013284012675285, 0.199639603495598, 0.076709605753422, -0.671265542507172, 0.466806828975677, 0.458620280027390, 0.399138450622559, 0.501034438610077, 0.048499286174774, -0.970810949802399, 1.325949192047119, 0.216258436441422, -0.073721341788769, 0.281511008739471, 0.803060472011566, -0.242980867624283, -0.071160875260830, 0.269646525382996, 0.390719860792160, 0.535772740840912, 0.027945606037974, -0.291538476943970, 0.264238864183426, -0.381598055362701, -0.468743890523911, 0.656753003597260, 0.418025672435760, 0.436787426471710, -0.631448149681091, 0.854574382305145, 0.439543515443802, 0.471320480108261, -0.245870247483253, -0.289163768291473, -0.651324331760406, -0.341041088104248, 0.010017042048275, 0.541576206684113, 0.139159962534904, 0.360636472702026, -0.982295751571655, 0.315298020839691, -0.823670148849487, 0.522126793861389, 0.032688569277525, 0.364205718040466, 0.018865531310439, -0.852923393249512, 0.749056875705719, 0.145372271537781, 0.295903623104095, -0.397788822650909, 0.130227789282799, 0.550782859325409, 0.409790545701981, 0.256738156080246, 0.152318969368935, -0.579772830009460, 0.327474683523178, -0.752385973930359, 0.222401469945908, 0.286898285150528, -0.076113224029541, -0.633119821548462, -1.122630476951599, -0.907672405242920, 0.191351443529129, 0.150976330041885, -0.055923823267221, -0.763689756393433, 1.013099431991577, -0.197626084089279, 0.261000454425812, 0.809792935848236, 0.813757896423340, -0.984867990016937, -0.271730750799179, 0.147656098008156, 0.166029408574104, -0.848515033721924, 0.972175300121307, 0.501448154449463, -0.848170101642609, 0.496651023626328, 1.061742067337036, 0.467702507972717, -0.076113216578960, -1.065468788146973, -0.039018627256155, -0.692270457744598
    };
    constexpr std::array<Scalar, 10> biases_1 = {
        0.070075556635857, 0.197875916957855, -0.185576632618904, -0.242997661232948, -0.157634571194649, 0.188501849770546, 0.023276062682271, 0.028133282437921, -0.027225321158767, -0.103283651173115
    };

    constexpr std::array<Scalar, 100> weights_2 = { 
        -0.203076288104057, -0.857171773910522, 0.722979903221130, 0.536060452461243, 0.636017858982086, -1.014675736427307, -0.050431407988071, 0.170116648077965, 0.711120843887329, 0.546172320842743, -0.111644141376019, 0.988027572631836, 0.394432514905930, -0.056442759931087, 0.684249103069305, -0.374322801828384, 0.386114180088043, 0.615316987037659, 0.209848716855049, -0.305091828107834, -0.482857227325439, 0.233131274580956, 0.001936207874678, 0.061995878815651, -0.144404530525208, -0.377630800008774, 0.786275684833527, 0.293718814849854, 1.184862613677979, 1.286109685897827, -0.193210214376450, 0.344730347394943, -0.148406699299812, 0.473221510648727, -0.605787694454193, 0.453269243240356, -0.166597396135330, 0.003508366411552, -0.018039543181658, -0.831492006778717, 0.344676941633224, -0.328389704227448, -0.191047996282578, 0.197374686598778, -0.281288087368011, -0.170965462923050, 0.456303924322128, 0.425976008176804, 0.215107873082161, -0.604834020137787, 0.716802835464478, 0.272395551204681, 0.672182559967041, -0.831779479980469, -1.272874116897583, -0.214393660426140, 0.121479205787182, 0.020031865686178, 0.631057977676392, 1.481248140335083, 0.293070524930954, 0.024722384288907, -0.607671022415161, -0.378879725933075, -0.790112555027008, -0.300855815410614, 0.046307399868965, -0.142971187829971, 1.001426458358765, 0.752728044986725, -0.020107127726078, 0.074792474508286, 0.361573487520218, -0.405003637075424, -0.357557713985443, 0.472855895757675, -0.032223705202341, -0.182969897985458, 1.225954771041870, 0.051792774349451, -0.163576543331146, 0.453088611364365, 0.095548853278160, 0.623092055320740, -0.123071998357773, -0.373416930437088, -0.544113159179688, -0.650870442390442, 0.650934576988220, 0.071236170828342, 0.778383672237396, -0.137565702199936, -0.432660639286041, 0.808591067790985, 1.445794343948364, -0.458332329988480, -0.905567526817322, -0.647000074386597, -0.057519946247339, 0.895661056041718
    };
    constexpr std::array<Scalar, 10> biases_2 = {0.347239285707474, -0.130973011255264, -0.607461154460907, 0.127226784825325, 0.195772886276245, -0.109702505171299, 0.148571819067001, -0.455085784196854, -0.130035981535912, -0.333309620618820
    };

    constexpr std::array<Scalar, 100> weights_3 = {
        -0.422757089138031, 0.694270312786102, -0.234196275472641, -0.148731067776680, -0.064126692712307, 0.743646681308746, -0.564842343330383, -0.318571478128433, 0.147775411605835, 0.091390214860439, -0.659494042396545, 0.206755563616753, -0.088497392833233, 0.250284403562546, -0.015961201861501, 0.437267035245895, -0.278993874788284, 0.054930612444878, -0.537229061126709, -0.619117438793182, 0.069400787353516, 0.598562180995941, -0.253201097249985, -0.136992305517197, 0.093454472720623, -0.955341696739197, 0.175652921199799, -0.103095650672913, -0.129185080528259, -0.224315956234932, 0.916620314121246, -0.221411168575287, -0.007135682739317, 0.078964799642563, 0.387089729309082, 0.203995645046234, -0.112091943621635, -0.220342472195625, -0.453833132982254, 0.220122978091240, -0.360634416341782, -0.548421442508698, 0.176572889089584, 0.660589337348938, 0.001406293944456, 0.538006603717804, 0.755980789661407, 0.523530662059784, 0.636156320571899, -0.455117821693420, -0.332550734281540, -0.004491175524890, -0.373495697975159, 0.069126188755035, -0.223949238657951, -0.462332040071487, -0.767413258552551, -0.831022977828979, 0.375696420669556, 1.126588702201843, 0.044103510677814, 0.634141445159912, 0.328509211540222, -0.048578195273876, 0.270018786191940, -0.144267007708549, 0.677875757217407, -0.258789986371994, 0.169523119926453, -0.408530324697495, 0.511712074279785, 0.232676297426224, -0.610959291458130, 0.481856942176819, -0.234644547104836, -0.764700233936310, -0.791777133941650, 0.149833679199219, 0.687092006206512, 0.443903833627701, 0.630770564079285, 0.729309439659119, 0.753547012805939, -0.137371674180031, 0.121354348957539, -1.387856125831604, -0.832016587257385, -0.025894155725837, 0.701541066169739, -0.381368905305862, 0.786898314952850, -0.041752919554710, -0.623316526412964, -0.794557750225067, -0.997162818908691, 0.633647441864014, -0.156746760010719, -0.266075789928436, 0.432639956474304, 0.003331597661600
    };
     constexpr std::array<Scalar, 10> biases_3 = {0.131809979677200, 0.262673258781433, 0.306226253509521, 0.393006145954132, -0.003473202697933, 0.096370264887810, -0.170667380094528, -0.156360402703285, -0.194691866636276, 0.019241306930780
    };
    
    constexpr std::array<Scalar, 100> weights_4 = {
        0.033607911318541, -0.088962845504284, -0.385434836149216, -0.597380518913269, 0.190863370895386, 0.044856127351522, -0.233233362436295, 0.257533282041550, 0.437357425689697, -0.218125090003014, -0.014721835963428, -0.324239403009415, -0.388743340969086, 0.140082791447639, -0.279294431209564, -0.557825386524200, 0.385075420141220, 0.019759066402912, 0.137040451169014, -0.374480426311493, -0.021659985184669, -0.087359957396984, -0.322892338037491, -0.702096462249756, -0.120673298835754, 0.017213474959135, -0.017106520012021, 0.780387699604034, -0.156218424439430, -0.420443236827850, 0.023979967460036, -0.429148703813553, -0.154160931706429, -0.110584512352943, 0.145088434219360, -0.227862790226936, 0.002651090966538, -0.262424916028976, -0.800561189651489, -0.462337434291840, -0.022927429527044, -0.160524800419807, 0.391370415687561, -0.290299475193024, 0.125901252031326, -0.151728942990303, 0.249645695090294, 0.053800307214260, 0.392708361148834, 0.549645483493805, -0.315790712833405, 0.100561551749706, -0.240280002355576, -0.215922072529793, 0.248861417174339, -0.144712403416634, -0.119279108941555, 0.291092574596405, -0.337951213121414, 0.463105171918869, -0.530151546001434, -0.244757413864136, -0.161200895905495, -0.163397416472435, 0.215668126940727, -0.443652004003525, 0.385875314474106, -0.068569146096706, -0.060377180576324, 0.174313977360725, -1.003527164459229, -0.256757020950317, -0.126417919993401, 0.137760758399963, 0.574252843856812, -0.617406547069550, -0.180137261748314, -0.240004867315292, 0.077851280570030, -0.192446112632751, 0.394911110401154, -0.041854534298182, 0.295221626758575, 0.012416272424161, -0.089511238038540, 0.283982574939728, -0.468875557184219, -0.418753355741501, 0.313034653663635, -0.396135568618774, 0.092451982200146, -0.446060568094254, -0.030687205493450, 0.138142839074135, 0.450100898742676, -0.507485747337341, -0.486617237329483, -0.423841446638107, 0.311415672302246, 0.001914230175316
    };
     constexpr std::array<Scalar, 10> biases_4 = {0.087598189711571, 0.173346668481827, -0.152617335319519, -0.243464946746826, 0.190493777394295, 0.282227009534836, 0.025861553847790, 0.073095083236694, -0.157863005995750, 0.027381397783756
    };

    constexpr std::array<Scalar, 110> weights_5 = { 
        0.018308185040951, 0.308496445417404, -0.217732369899750, 0.333713769912720, 0.426037847995758, 0.387004464864731, -0.430290162563324, 0.123115904629230, 0.216801568865776, -0.342865347862244, -0.017045987769961, -0.074121251702309, 0.055124174803495, -0.070873923599720, -0.077527992427349, -0.084744781255722, 0.078746430575848, -0.025490058586001, -0.046411577612162, 0.089470297098160, -0.043684862554073, 0.037516910582781, 0.050317451357841, -0.042917374521494, 0.023978069424629, 0.075993061065674, -0.037853986024857, -0.000214643339859, 0.105794176459312, 0.041337892413139, -0.311472356319427, 0.075137645006180, -0.185101225972176, -0.160347700119019, 0.009994506835938, -0.245019689202309, -0.139563560485840, 0.404245942831039, 0.229989990592003, 0.230314344167709, -0.323499381542206, -0.412191331386566, 0.224406823515892, 0.211069896817207, 0.231970310211182, -0.358545392751694, -0.262880265712738, 0.092986941337585, -0.294124752283096, 0.259144008159637, 0.108613878488541, 0.297994524240494, 0.295544177293777, 0.396939069032669, -0.228836551308632, -0.355811715126038, -0.068491362035275, 0.178550690412521, 0.538996458053589, 0.178231090307236, -0.056440640240908, 0.022644726559520, 0.041503585875034, -0.007865547202528, 0.044808898121119, 0.065356358885765, 0.033453423529863, -0.006678203120828, 0.114308036863804, -0.008571327663958, 0.445823282003403, -0.475741118192673, -0.255313932895660, -0.171454429626465, 0.094126693904400, 0.189032241702080, -0.151072934269905, -0.032317891716957, 0.148321583867073, 0.521531105041504, -0.187866792082787, -0.073394104838371, -0.020419195294380, 0.165221333503723, 0.237629413604736, 0.121649451553822, 0.560578346252441, -0.062679305672646, 0.275633007287979, -0.343957483768463, 0.000000000006087, 0.000000000006744, -0.000000000004137, -0.000000000002053, -0.000000000003439, 0.000000000006915, 0.000000000005078, -0.000000000002450, 0.000000000006685, -0.000000000004846, 0.000000011716824, -0.000000003521198, -0.000000006875632, -0.000000001899477, -0.000000002213552, 0.000000001517892, -0.000000007112056, 0.000000000311461, -0.000000002183271, 0.000000006625737
    };
    constexpr std::array<Scalar, 11> biases_5 = {-0.097516581416130, 0.020342009142041, -0.008988065645099, -0.029406484216452, 0.045991271734238, 0.202059090137482, -0.000258498417679, -0.094977587461472, 0.027952425181866, -0.000000000000704, -0.000000001610611
    };

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//

    auto tanhCustom = +[](Scalar& output, Scalar input, Scalar alpha) noexcept {
        // output = std::tanh(input);
        output = input * tanh(log(1.0 + exp(input)));
    };

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//

    std::array<Scalar, 10> layer_1_output;
    Dense<Scalar, 10>(
        layer_1_output.data(), model_input.data(),
        weights_1.data(), biases_1.data(),
        11, tanhCustom, 0.0);

    std::array<Scalar, 10> layer_2_output;
    Dense<Scalar, 10>(
        layer_2_output.data(), layer_1_output.data(),
        weights_2.data(), biases_2.data(),
        10, tanhCustom, 0.0);

    std::array<Scalar, 10> layer_3_output;
    Dense<Scalar, 10>(
        layer_3_output.data(), layer_2_output.data(),
        weights_3.data(), biases_3.data(),
        10, tanhCustom, 0.0);

    std::array<Scalar, 10> layer_4_output;
    Dense<Scalar, 10>(
        layer_4_output.data(), layer_3_output.data(),
        weights_4.data(), biases_4.data(),
        10, tanhCustom, 0.0);

    std::array<Scalar, 11> layer_5_output;
    Dense<Scalar, 11>(
        layer_5_output.data(), layer_4_output.data(),
        weights_5.data(), biases_5.data(),
        10, tanhCustom, 0.0);
    
    std::array<Scalar, 11> model_output = layer_5_output;

    return model_output;
}
